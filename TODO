TODO:

* GIOP fragments
	+ need to handle a cancel request in the middle of a fragment stream


* It seems the local case optimization can go wrong when
  invoking bogus methods from a different interface on an Object ref.
	+ this is to do with
		a) not checking the vepv offset we get
		b) not expanding the lookup of the vepv offset at all.

* Thread safety
	+ We need to ensure that the ref counting on
	  linc-connections is guarded by a lock, and that
	  the destruction-proper is done in the worker thread;
	  we're already polling for Input here; so we should
	  fire off the 'shutdown' message, from the thread and
	  close the fd (will that wake the poll or do we need
	  another sort of wakeup ?).

	+ apparently g_object_ref / unref are not thread safe
	  we need linc_object_ref / unref instead that does
	  a LINC_MUTEX_LOCK on the global object lifecycle lock
	  that needs to move into linc ... sigh !

	+ document; all connection stuff - thread safe, and done
	  in the linc mainloop - no need for extra locking [!]

	  giop-server - used by ORBit_ORB_start_servers
	  (and stop) - but only otherwise in worker thread.

* Optimization
	+ we need 2 de-marshalling routines, 1 with (slow)
	  byteswap and 1 without it, save scads and scads of
	  branch cache misses; easy to do too; make it a virtual
	  method on the recv buffer (?) [ for easy chaining ]

	+ we need some concept of align == native align flagged
	  on TypeCodes, so we can blat things quickly with memcpy
	  in a generic way - eg. sequences of octets.

	+ we need to implement 'wait for completion' on
	  shutdown so that we can activate async unrefs in
	  bonobo.

* Dragons:
	+ giop_recv_buffer.c (giop_connection_handle_input)
	  manages to go through the error condition a whole
	  load; _why_ is this ? - is it a recursive effect on
	  the method ? why are we called if there is no data ?

	+ We need a typecast in an _allocbuf which we know is
	  aliased, eg. PortableServer_POAList_allocbuf, since
	  it gets assigned to a CORBA_Object *, and the cast
	  is bogus.