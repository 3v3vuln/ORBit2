dnl Process this file with autoconf to produce a configure script.
AC_INIT(configure.in)

AC_PREREQ(2.12) # required version of autoconf

# (From GTK+)
# Making releases:
#   ORBIT_MICRO_VERSION += 1;
#   ORBIT_INTERFACE_AGE += 1;
#   ORBIT_BINARY_AGE += 1;
# if any functions have been added, set ORBIT_INTERFACE_AGE to 0.
# if backwards compatibility has been broken,
# set ORBIT_BINARY_AGE and ORBIT_INTERFACE_AGE to 0.
#
##########
# Screw the above, just play with the numbers until they match the
# package version number. As soon as libtool lets us specify
# sonames we'll start using that for binary compat, but until then
# caveat user :)

ORBIT_MAJOR_VERSION=2
ORBIT_MINOR_VERSION=3
ORBIT_MICRO_VERSION=0
ORBIT_INTERFACE_AGE=1
ORBIT_BINARY_AGE=1
ORBIT_VERSION=$ORBIT_MAJOR_VERSION.$ORBIT_MINOR_VERSION.$ORBIT_MICRO_VERSION
VERSION=$ORBIT_VERSION
PACKAGE=ORBit

# libtool versioning
#LT_RELEASE=$ORBIT_MAJOR_VERSION.$ORBIT_MINOR_VERSION
#LT_CURRENT=`expr $ORBIT_MICRO_VERSION - $ORBIT_INTERFACE_AGE`
#LT_REVISION=$ORBIT_INTERFACE_AGE
#LT_AGE=`expr $ORBIT_BINARY_AGE - $ORBIT_INTERFACE_AGE`
LT_RELEASE=$ORBIT_VERSION
LT_CURRENT=$ORBIT_INTERFACE_AGE
LT_REVISION=$ORBIT_BINARY_AGE
LT_AGE=`expr $ORBIT_INTERFACE_AGE - $ORBIT_BINARY_AGE`

# Increment this every time a feature is added in the .idl compiler
# that needs help from the main libraries.
ORBIT_SERIAL=10

AC_SUBST(ORBIT_MAJOR_VERSION)
AC_SUBST(ORBIT_MINOR_VERSION)
AC_SUBST(ORBIT_MICRO_VERSION)
AC_SUBST(ORBIT_VERSION)
AC_SUBST(LT_RELEASE)
AC_SUBST(LT_CURRENT)
AC_SUBST(LT_REVISION)
AC_SUBST(LT_AGE)
AC_SUBST(ORBIT_SERIAL)

# For automake.

AM_CONFIG_HEADER(config.h)

dnl Initialize automake stuff
AM_INIT_AUTOMAKE($PACKAGE, $VERSION, no-define)

AC_PROG_LIBTOOL
AM_MAINTAINER_MODE

dnl Checks for programs.
AC_PROG_CC
AC_PROG_INSTALL

dnl Handle indent variations 
dnl default is "sopwith indent", use "--enable-indent=kr" for "kr"appy indent.
AC_ARG_ENABLE(indent, [  --disable-indent        do not indent output code], use_indent=$enableval, use_indent=yes)

AC_MSG_CHECKING([for indentation command to pipe generated c-files through])
for test_indent in "$use_indent" "indent -" cat; do
  case "$test_indent" in
    yes)
      INDENT_COMMAND="indent -npro -bad -bap -bc -sob -br -ce -cli2 -npcs -di1 -psl -i3 -lp -st"
      ;;
    no)
      INDENT_COMMAND=cat
      ;;
    kr)
      INDENT_COMMAND="indent -npro -kr -i8 -bad -fca -sc -sob -psl"
      ;;
    *)
      INDENT_COMMAND="$test_indent"
  esac

  if echo 2>/dev/null | $INDENT_COMMAND 2>/dev/null 1>&2 ; then
    break
  fi
done
AC_MSG_RESULT($INDENT_COMMAND)
AC_DEFINE_UNQUOTED(INDENT_COMMAND,"$INDENT_COMMAND")

dnl Checks for libraries.

AM_PATH_GLIB_2_0(1.3.1,, AC_MSG_ERROR([*** GLIB 1.3.1 or better is required. The latest version of GLIB
*** is always available from ftp://ftp.gtk.org/.]))

AC_PROG_YACC
AM_PROG_LEX
AC_PROG_AWK

dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(fcntl.h unistd.h sys/endian.h endian.h machine/endian.h sys/machine.h sys/isa_defs.h sys/poll.h)
AC_CHECK_HEADERS(stddef.h wchar.h wcstr.h wctype.h machine/types.h)
AC_CHECK_HEADERS(netinet/in.h sys/un.h linux/irda.h openssl/ssl.h)

if test $ac_cv_header_openssl_ssl_h = yes; then
	HAVE_ORBIT_SSL_SUPPORT=1
fi
AC_SUBST(HAVE_ORBIT_SSL_SUPPORT)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_TYPE_SIZE_T

dnl Checks for library functions.
AC_FUNC_VPRINTF
AC_FUNC_ALLOCA
if test $ac_cv_header_alloca_h = yes; then
	ORBIT_HAVE_ALLOCA_H=1
else
	ORBIT_HAVE_ALLOCA_H=0
fi
AC_SUBST(ORBIT_HAVE_ALLOCA_H)

AC_CHECK_FUNCS(poll basename)
AC_CHECK_FUNC(socket,,[AC_CHECK_LIB(socket,socket)])
AC_CHECK_FUNC(gethostbyname,,[AC_CHECK_LIB(nsl,gethostbyname)])

AC_CHECK_LIB(popt, poptStrippedArgv, POPT_LIBS=-lpopt, AC_MSG_ERROR([You must have popt version 1.5 or greater installed.]))
AC_SUBST(POPT_LIBS)

# AC_CHECK_TYPE doesn't work here.
AC_MSG_CHECKING([for socklen_t])
AC_TRY_COMPILE(
  [#include <sys/types.h>
#include <sys/socket.h>],
  [socklen_t len;],
  [AC_MSG_RESULT(yes)],
  [AC_DEFINE(socklen_t, size_t)
   AC_MSG_RESULT(no)])

AC_CHECK_FUNC(inet_aton,,[AC_CHECK_LIB(resolv,inet_aton)])
if test x$ac_cv_func_inet_aton = xno && test x$ac_cv_lib_resolv_inet_aton = xno
then :
else
  AC_DEFINE(HAVE_INET_ATON)
fi

dnl This generates warnings from autoconf...
AC_C_BIGENDIAN

AC_TRY_RUN([
#include <fcntl.h>
#include <sys/uio.h>
#define NIOVECS 50
int main(int argc, char *argv[])
{
	char dumbuf[20] = "\n";
	struct iovec iovecs[NIOVECS];
	int i,fd;

	for(i = 0; i < NIOVECS; i++) {
		iovecs[i].iov_base = dumbuf;
		iovecs[i].iov_len = 1;
	}

	fd=open("/dev/null", O_WRONLY);
	if(fd==-1)
		return(1);

	if(writev(fd, iovecs, NIOVECS) < 0)
		return 1;

	close(fd);
	return 0;
}
], , AC_DEFINE(HAVE_LIMITED_WRITEV), AC_DEFINE(HAVE_LIMITED_WRITEV))
AC_SUBST(HAVE_LIMITED_WRITEV)

#######################
# type alignment test #
#######################

AC_DEFUN(AC_CHECK_ALIGNOF,
[changequote(<<, >>)dnl
dnl The name to #define.
define(<<AC_TYPE_NAME>>, translit(alignof_$1, [a-z *], [A-Z_P]))dnl
dnl The cache variable name.
define(<<AC_CV_NAME>>, translit(ac_cv_alignof_$1, [ *], [_p]))dnl
changequote([, ])dnl
AC_MSG_CHECKING(alignment of $1)
align_save_libs="$LIBS"
LIBS="$GLIB_LIBS $LIBS"
AC_CACHE_VAL(AC_CV_NAME,
[AC_TRY_RUN([
#include <stdio.h>
#include "$srcdir/include/orbit/util/basic_types.h"
typedef struct {char s1;} CORBA_struct;
typedef void *CORBA_pointer;
struct test {char s1; $1 s2;};
main()
{
  FILE *f=fopen("conftestval", "w");
  if (!f) exit(1);
  fprintf(f, "%d\n", &(((struct test*)0)->s2));
  exit(0);
}], AC_CV_NAME=`cat conftestval`, AC_CV_NAME=0, AC_CV_NAME=0)])dnl
AC_MSG_RESULT($AC_CV_NAME)
LIBS="$align_save_libs"
AC_DEFINE_UNQUOTED(AC_TYPE_NAME, $AC_CV_NAME)
undefine([AC_TYPE_NAME])dnl
undefine([AC_CV_NAME])dnl
])

orig_CPPFLAGS=$CPPFLAGS
CPPFLAGS="$CPPFLAGS $GLIB_CFLAGS"
AC_CHECK_ALIGNOF(CORBA_short)
AC_CHECK_ALIGNOF(CORBA_long)
AC_CHECK_ALIGNOF(CORBA_long_long)
AC_CHECK_ALIGNOF(CORBA_float)
AC_CHECK_ALIGNOF(CORBA_double)
AC_CHECK_ALIGNOF(CORBA_long_double)
AC_CHECK_ALIGNOF(CORBA_char)
AC_CHECK_ALIGNOF(CORBA_boolean)
AC_CHECK_ALIGNOF(CORBA_octet)
AC_CHECK_ALIGNOF(CORBA_wchar)
AC_CHECK_ALIGNOF(CORBA_struct)
AC_CHECK_ALIGNOF(CORBA_pointer)
CPPFLAGS=$orig_CPPFLAGS 

AC_CONFIG_SUBDIRS(libIDL)
AC_CONFIG_SUBDIRS(popt)

AC_SUBST(pkglibdir)

AC_OUTPUT([
Makefile
orbit-config
ORBit.spec
src/Makefile
src/idl-compiler/Makefile
src/orb/Makefile
src/orb/util/Makefile
src/orb/IIOP/Makefile
src/orb/orb-core/Makefile
src/orb/dynamic/Makefile
src/orb/poa/Makefile
include/Makefile
include/orbit/Makefile
include/orbit/orbit-config.h
include/orbit/IIOP/Makefile
include/orbit/util/Makefile
docs/Makefile
docs/devel/Makefile
docs/internals/Makefile
])
