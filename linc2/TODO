** linc_main_iteration () / linc_main_loop_run ...
	+ We need to examine the API/ABI compat issues with
	  these methods; what can we do about them ?
	+ It seems we need a dummy 'wakeup' loop which we
	  simply wake-up when someone in the main thread
	  calls linc_main_iteration / linc_main_loop_run
	  from the main thread [ ... ]
	+ and/or screw people using the 'linc_*' apis ...

Incoming foo
	+ need to treat the poll atomically,
	+ on input,
		+ take lock
		+ huge nonblocking read 
		+ process requests ...
		+ release lock

linc-connection.c
	+ Last unref [ in mainloop !? ]
	+ cnx deref lock -> ref count lifecycle.

	+ always disconnecting -> disconnected ?
	+ on read/write also take lock ...
		+ linc_connection_wait_state change (internal?)
			+ [ - wait for disconnected / connected etc. ? ]
		+ write can try to write (with lock) for a bit

** TODO:
	+ push cnx_get_status method through ORBit2
	+ Need a linc test that certainly fills a socket
	  buffer on write in threaded mode ...

	+ global cross thread condition / task queue thing ?
		+ shutdown
		+ callback mechanism for 'broken' etc. ?

** Older thoughts:
	+ create (linc_connection_initiate) [ take lock ]
	+ linc_connection_state_changed     [ take lock ]
		+ assert happened in the I/O thread ...
		+ During construction this bit hooks it into the
		  polling loop - must be done in the main loop (!)
		  [ or must it ? - special case for construction ? ]
		+ signal the connections' condition ...
