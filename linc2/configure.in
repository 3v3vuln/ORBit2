dnl Process this file with autoconf to produce a configure script.
AC_INIT(configure.in)

AC_PREREQ(2.12) # required version of autoconf

LINC_MAJOR_VERSION=0
LINC_MINOR_VERSION=0
LINC_MICRO_VERSION=0
LINC_INTERFACE_AGE=1
LINC_BINARY_AGE=1
LINC_VERSION=$LINC_MAJOR_VERSION.$LINC_MINOR_VERSION.$LINC_MICRO_VERSION
VERSION=$LINC_VERSION
PACKAGE=linc

LT_RELEASE=$LINC_VERSION
LT_CURRENT=$LINC_INTERFACE_AGE
LT_REVISION=$LINC_BINARY_AGE
LT_AGE=`expr $LINC_INTERFACE_AGE - $LINC_BINARY_AGE`

AC_SUBST(LINC_MAJOR_VERSION)
AC_SUBST(LINC_MINOR_VERSION)
AC_SUBST(LINC_MICRO_VERSION)
AC_SUBST(LINC_VERSION)
AC_SUBST(LT_RELEASE)
AC_SUBST(LT_CURRENT)
AC_SUBST(LT_REVISION)
AC_SUBST(LT_AGE)

# For automake.

AM_CONFIG_HEADER(config.h)

dnl Initialize automake stuff
AM_INIT_AUTOMAKE($PACKAGE, $VERSION, no-define)

AM_PROG_LIBTOOL
AM_MAINTAINER_MODE

dnl Checks for programs.
AC_PROG_CC
AC_PROG_INSTALL

AM_PATH_GLIB_2_0(1.3.1,, AC_MSG_ERROR([*** GLIB 1.3.1 or better is required. The latest version of GLIB
*** is always available from ftp://ftp.gtk.org/.]))

AC_PROG_YACC
AM_PROG_LEX
AC_PROG_AWK

dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(fcntl.h unistd.h sys/endian.h endian.h machine/endian.h sys/machine.h sys/isa_defs.h sys/poll.h)
AC_CHECK_HEADERS(stddef.h wchar.h wcstr.h wctype.h machine/types.h)
AC_CHECK_HEADERS(netinet/in.h sys/un.h linux/irda.h openssl/ssl.h)

if test $ac_cv_header_openssl_ssl_h = yes; then
	LINC_SSL_SUPPORT=1
	SSL_LIBS="-lssl -lcrypto"
fi
AC_SUBST(LINC_SSL_SUPPORT)
AC_SUBST(SSL_LIBS)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_TYPE_SIZE_T

dnl Checks for library functions.
AC_FUNC_VPRINTF
AC_FUNC_ALLOCA
if test $ac_cv_header_alloca_h = yes; then
	LINC_HAVE_ALLOCA_H=1
else
	LINC_HAVE_ALLOCA_H=0
fi
AC_SUBST(LINC_HAVE_ALLOCA_H)

AC_CHECK_FUNCS(poll basename)
AC_CHECK_FUNC(socket,,[AC_CHECK_LIB(socket,socket)])
AC_CHECK_FUNC(gethostbyname,,[AC_CHECK_LIB(nsl,gethostbyname)])

# AC_CHECK_TYPE doesn't work here.
AC_MSG_CHECKING([for socklen_t])
AC_TRY_COMPILE(
  [#include <sys/types.h>
#include <sys/socket.h>],
  [socklen_t len;],
  [AC_MSG_RESULT(yes)],
  [AC_DEFINE(socklen_t, size_t)
   AC_MSG_RESULT(no)])

AC_C_BIGENDIAN

AC_TRY_RUN([
#include <fcntl.h>
#include <sys/uio.h>
#define NIOVECS 50
int main(int argc, char *argv[])
{
	char dumbuf[20] = "\n";
	struct iovec iovecs[NIOVECS];
	int i,fd;

	for(i = 0; i < NIOVECS; i++) {
		iovecs[i].iov_base = dumbuf;
		iovecs[i].iov_len = 1;
	}

	fd=open("/dev/null", O_WRONLY);
	if(fd==-1)
		return(1);

	if(writev(fd, iovecs, NIOVECS) < 0)
		return 1;

	close(fd);
	return 0;
}
], , AC_DEFINE(HAVE_LIMITED_WRITEV), AC_DEFINE(HAVE_LIMITED_WRITEV))
AC_SUBST(HAVE_LIMITED_WRITEV)

AC_OUTPUT([
Makefile
src/Makefile
include/Makefile
include/linc/Makefile
include/linc/linc-config.h
])
